{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inersertion Sort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def insertion_sort(a):\n",
    "        zaehler = 0\n",
    "        for i in range(len(a)):\n",
    "                j=i\n",
    "                while j>0:\n",
    "                        ## die Feldbedingung für \"while\" haben wir extrahiert, sodass wir alle vergleiche zaehlen können.\n",
    "                        zaehler += 1\n",
    "                        if a[j-1] > a[j]:\n",
    "                                a[j-1], a[j] = a[j], a[j-1]\n",
    "                                j= j-1\n",
    "                        else: break\n",
    "        return zaehler\n",
    "#main\n",
    "import random\n",
    "N = 20\n",
    "a = list(range(N))\n",
    "random.shuffle(a)\n",
    "print(insertion_sort(a))\n",
    "a=[1,5,6,4]\n",
    "print(insertion_sort(a))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quick Sort Implementation für Vergleichszaehlungen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend",
     "outputPrepend"
    ]
   },
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def quick_sort(a):\n",
    "    return quicksortImpl (a,0,len(a)-1)\n",
    "    \n",
    "def quicksortImpl(a,l,r):\n",
    "    counter = 0\n",
    "    if r > l:\n",
    "        k, part_counter = partition(a, l, r)\n",
    "\n",
    "        counter += part_counter\n",
    "        counter += quicksortImpl(a,l, k-1)\n",
    "        counter += quicksortImpl(a,k+1, r)\n",
    "    return counter\n",
    "\n",
    "def partition (a,l,r):\n",
    "    counter = 0\n",
    "\n",
    "    m=random.randint(l,r)\n",
    "    a[m], a[r] = a[r], a[m]\n",
    "    zaehlliste.append(1)\n",
    "    pivot = a[r]\n",
    "    i= l\n",
    "    j= r-1\n",
    "    while True:\n",
    "        while i < r:\n",
    "            counter+=1\n",
    "            if a[i]<= pivot:\n",
    "                i= i+1\n",
    "            else: break\n",
    "        while j > l:\n",
    "            counter+=1\n",
    "            if a[j]>= pivot:\n",
    "                j= j-1\n",
    "            else: break\n",
    "        if i<j:\n",
    "            a[i], a[j]= a[j], a[i]\n",
    "        else: \n",
    "            break        \n",
    "    a[r]= a[i]\n",
    "\n",
    "    a[i]= pivot\n",
    "    return i, counter\n",
    "#main \n",
    "#a= [1,2,3,4,5]\n",
    "#print(\"anzahl der Vertauschungen:\", quick_sort(a))\n",
    "#print(a)\n",
    "#print(zaehlliste)\n",
    "#b=[1,2,3,4,5]\n",
    "#print(\"Anzahl der Vertauschungen:\", quick_sort(b))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting fuer Vergleiche mit Unsortierten Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Data for plotting\n",
    "N = np.arange(0.0, 200, 10.0)\n",
    "insertfeld = []\n",
    "quickfeld = []\n",
    "#wir brauchen ein Feld mit den Größen zum plotten\n",
    "for i in range(20):\n",
    "    a = list(range(10 + 10*i))\n",
    "    random.shuffle(a)\n",
    "    insertfeld.append(insertion_sort(a))\n",
    "    b = list (range(10+10*i))\n",
    "    random.shuffle(b)\n",
    "    quickfeld.append(quick_sort(b))\n",
    "c_1 = 1/(3.2)* N**2\n",
    "c_2 = 1.38* N* np.log2(N)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(N, c_2, label = 'Theoretischer quicksort')\n",
    "ax.plot (N,c_1, label = 'Theoretischer insertionsort')\n",
    "ax.plot(N, insertfeld, label = 'Unser insertionsort')\n",
    "ax.plot(N, quickfeld, label = 'Unser quicksort')\n",
    "\n",
    "ax.legend (loc='upper left')\n",
    "\n",
    "ax.set(xlabel='Länge des Arrays N', ylabel='Anzahl der Vergleiche',\n",
    "       title='Mit unsortieren Arrays')\n",
    "ax.grid()\n",
    "\n",
    "fig.savefig(\"test.png\")\n",
    "plt.show()\n",
    "#clear all vars\n",
    "quickfeld.clear()\n",
    "insertfeld.clear()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QuickSort Implementation 2 mit ungeschicktem Pivot El (immer rechts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ungeschicktes pivot element\n",
    "import random\n",
    "\n",
    "def quick_sort2(a):\n",
    "    return quicksortImpl2 (a,0,len(a)-1)\n",
    "\n",
    "def quicksortImpl2(a,l,r):\n",
    "    counter = 0\n",
    "    if r > l:\n",
    "        k, part_counter = partition2(a, l, r)\n",
    "\n",
    "        counter += part_counter\n",
    "        counter += quicksortImpl2(a,l, k-1)\n",
    "        counter += quicksortImpl2(a,k+1, r)\n",
    "    return counter\n",
    "\n",
    "def partition2 (a,l,r):\n",
    "    counter = 0\n",
    "    pivot = a[r]\n",
    "    i= l\n",
    "    j= r-1\n",
    "    while True:\n",
    "        while i < r:\n",
    "            counter+=1\n",
    "            if a[i]<= pivot:\n",
    "                i= i+1\n",
    "            else: break\n",
    "        while j > l:\n",
    "            counter+=1\n",
    "            if a[j]>= pivot:\n",
    "                j= j-1\n",
    "            else: break\n",
    "        if i<j:\n",
    "            a[i], a[j]= a[j], a[i]\n",
    "        else: \n",
    "            break        \n",
    "    a[r]= a[i]\n",
    "\n",
    "    a[i]= pivot\n",
    "    return i, counter\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting quicksort1 vs. quicksort2 mit sort. Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Visualisierung ungeschicktes element\n",
    "# Data for plotting\n",
    "N = np.arange(0.0, 200, 10.0)\n",
    "quick2feld = []\n",
    "quickfeld = []\n",
    "#wir brauchen ein Feld mit den Größen zum plotten\n",
    "#mit sortiertem Feld\n",
    "for i in range(20):\n",
    "    a = list(range(10 + 10*i))\n",
    "    quick2feld.append(quick_sort2(a))\n",
    "    b = list(range(10+10*i))\n",
    "    quickfeld.append(quick_sort(b))\n",
    "\n",
    "#Komplexität von insertionsort wird linear\n",
    "#c_1 = 1* N\n",
    "c_2 = 1.38* N* np.log2(N)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(N, c_2, label = 'Theoretischer Quicksort [pivot rand.]')\n",
    "#ax.plot (N,c_1, label = 'c_1')\n",
    "ax.plot(N, quick2feld, '-r', label = 'quicksort2 [pivot rechts]')\n",
    "ax.plot(N, quickfeld, label = 'quicksort [pivot rand.]')\n",
    "\n",
    "ax.legend (loc='upper left')\n",
    "\n",
    "ax.set(xlabel='Länge des Arrays N', ylabel='Anzahl der Vergleiche',\n",
    "       title='quicksort1 vs. quicksort2 bei sort. Arrays')\n",
    "ax.grid()\n",
    "\n",
    "fig.savefig(\"schlechterquick.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting fuer Sortiertalg mit sortierten Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#graphen mit bereits sortieren Arrays\n",
    "# Data for plotting\n",
    "N = np.arange(0.0, 200, 10.0)\n",
    "insertfeld = []\n",
    "quickfeld = []\n",
    "#wir brauchen ein Feld mit den Größen zum plotten\n",
    "for i in range(20):\n",
    "    a = list(range(10 + 10*i))\n",
    "    insertfeld.append(insertion_sort(a))\n",
    "    b = list(range(10+10*i))\n",
    "    quickfeld.append(quick_sort(b))\n",
    "\n",
    "#Komplexität von insertionsort wird linear\n",
    "c_1 = 1* N\n",
    "#c_2 = 1/2* N* np.log2(N)\n",
    "c_2 =  N* np.log2(N)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(N, c_2, label = 'Theoretischer Quicksort')\n",
    "ax.plot (N,c_1, label = 'Theoretischer insertionsort')\n",
    "ax.plot(N, insertfeld, '-r', label = 'insertionsort')\n",
    "ax.plot(N, quickfeld, label = 'quicksort [pivot rand.]')\n",
    "\n",
    "ax.legend (loc='upper left')\n",
    "\n",
    "ax.set(xlabel='Länge des Arrays N', ylabel='Anzahl der Vergleiche',\n",
    "       title='Mit sortieren Arrays')\n",
    "ax.grid()\n",
    "\n",
    "fig.savefig(\"sortierearrays.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38264bite0b74fa9f6af47baa15e0261dabdd5cd",
   "display_name": "Python 3.8.2 64-bit"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}